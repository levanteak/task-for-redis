package task.redis.v1.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import task.redis.v1.entity.User;
import task.redis.v1.repository.UserRepository;

import java.util.Optional;

@Service
@Slf4j
public class UserService {
    private final UserRepository repo;

    public UserService(UserRepository repo) {
        this.repo = repo;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–∞–∑—É –∫–ª–∞–¥—ë–º –≤ –∫—ç—à)
    @CachePut(value = "users", key = "#result.id")
    public User createUser(User user) {
        log.info("üìå –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∞–¥—ë–º –≤ –∫—ç—à...");
        return repo.save(user);
    }

    @Cacheable(value = "users", key = "#id")
    public Optional<User> getUser(Long id) {
        log.info("üìå –ß–∏—Ç–∞–µ–º –∏–∑ –ë–î...");
        return repo.findById(id);
    }

    @CachePut(value = "users", key = "#user.id")
    public User updateUser(User user) {
        log.info("üìå –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∏ –∫—ç—à...");
        return repo.save(user);
    }

    @CacheEvict(value = "users", key = "#id")
    public void deleteUser(Long id) {
        log.info("üìå –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∞...");
        repo.deleteById(id);
    }
}
